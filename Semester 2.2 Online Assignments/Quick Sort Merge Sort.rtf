{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16   1  \cb3\cf13 #include<bits/stdc++.h>
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf13 #include<stdlib.h>
\par \cb1\cf0\ul0\i0\b0   3  \cb3\cf11\b using namespace \b0\cb3\cf13\b std\b0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   4  
\par \cb1\cf0\ul0\i0\b0   5  
\par \cb1\cf0\ul0\i0\b0   6  
\par \cb1\cf0\ul0\i0\b0   7  
\par \cb1\cf0\ul0\i0\b0   8  \cb3\cf11\b void \b0\cb1\cf0 quick_sort\cb3\cf22 (\cb3\cf11\b int \b0\cb3\cf13\b array\b0\cb3\cf22 [],\cb3\cf11\b int \b0\cb1\cf0 f \cb3\cf22 , \cb3\cf11\b int \b0\cb1\cf0 l\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0   9  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  10      \cb3\cf11\b int \b0\cb1\cf0 i \cb3\cf22 , \cb1\cf0 j\cb3\cf22 ,\cb1\cf0 temp\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  11      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 f \cb3\cf22 < \cb1\cf0 l\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  12      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  13          \cb1\cf0 i \cb3\cf22 = \cb1\cf0 f\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  14          \cb1\cf0 j \cb3\cf22 = \cb1\cf0 l\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  15          \cb3\cf11\b while \b0\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ] < \cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 f\cb3\cf22 ])
\par \cb1\cf0\ul0\i0\b0  16          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  17              \cb1\cf0 i\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0  18          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  19          \cb3\cf11\b while\b0\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ] > \cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 f\cb3\cf22 ])
\par \cb1\cf0\ul0\i0\b0  20          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  21              \cb1\cf0 j\cb3\cf22 --;
\par \cb1\cf0\ul0\i0\b0  22          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  23          \cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 i \cb3\cf22 < \cb1\cf0 j\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  24          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  25  
\par \cb1\cf0\ul0\i0\b0  26           \cb1\cf0 temp\cb3\cf22 =\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0  27           \cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ]=\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0  28           \cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]=\cb1\cf0 temp\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  29  
\par \cb1\cf0\ul0\i0\b0  30              \cb3\cf11\b while \b0\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ] < \cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 f\cb3\cf22 ])
\par \cb1\cf0\ul0\i0\b0  31              \{
\par \cb1\cf0\ul0\i0\b0  32                  i++;
\par \cb1\cf0\ul0\i0\b0  33              \}
\par \cb1\cf0\ul0\i0\b0  34  
\par \cb1\cf0\ul0\i0\b0  35              while(array[j] > array[f])
\par \cb1\cf0\ul0\i0\b0  36              \{
\par \cb1\cf0\ul0\i0\b0  37                  j--;
\par \cb1\cf0\ul0\i0\b0  38              \}
\par \cb1\cf0\ul0\i0\b0  39          \}
\par \cb1\cf0\ul0\i0\b0  40  
\par \cb1\cf0\ul0\i0\b0  41          temp=array[f];
\par \cb1\cf0\ul0\i0\b0  42          array[f]=array[j];
\par \cb1\cf0\ul0\i0\b0  43          array[j]=temp;
\par \cb1\cf0\ul0\i0\b0  44  
\par \cb1\cf0\ul0\i0\b0  45          quick_sort(array,f , j-1);
\par \cb1\cf0\ul0\i0\b0  46          quick_sort(array,j+1 , l);
\par \cb1\cf0\ul0\i0\b0  47      \}
\par \cb1\cf0\ul0\i0\b0  48  \}
\par \cb1\cf0\ul0\i0\b0  49  
\par \cb1\cf0\ul0\i0\b0  50  
\par \cb1\cf0\ul0\i0\b0  51  void arrayMerge(int array[] , int left , int mid , int right)
\par \cb1\cf0\ul0\i0\b0  52  \{
\par \cb1\cf0\ul0\i0\b0  53      int n1 = mid-left+1;
\par \cb1\cf0\ul0\i0\b0  54      int n2 = right-mid;
\par \cb1\cf0\ul0\i0\b0  55      int L[n1+1] , R[n2+1];
\par \cb1\cf0\ul0\i0\b0  56      for(int i = 0 ; i < n1 ; i++)
\par \cb1\cf0\ul0\i0\b0  57      \{
\par \cb1\cf0\ul0\i0\b0  58          L[i] = array[left+i];
\par \cb1\cf0\ul0\i0\b0  59      \}
\par \cb1\cf0\ul0\i0\b0  60      for(int j = 0 ; j < n2 ; j++)
\par \cb1\cf0\ul0\i0\b0  61      \{
\par \cb1\cf0\ul0\i0\b0  62          R[j] = array[mid+1+j];
\par \cb1\cf0\ul0\i0\b0  63      \}
\par \cb1\cf0\ul0\i0\b0  64      L[n1] = INT_MAX;
\par \cb1\cf0\ul0\i0\b0  65      R[n2] = INT_MAX;
\par \cb1\cf0\ul0\i0\b0  66  
\par \cb1\cf0\ul0\i0\b0  67      for(int i = 0 , j = 0 , k = left ; k <= right ; k++)
\par \cb1\cf0\ul0\i0\b0  68      \{
\par \cb1\cf0\ul0\i0\b0  69          if(L[i] <= R[j])
\par \cb1\cf0\ul0\i0\b0  70          \{
\par \cb1\cf0\ul0\i0\b0  71              array[k] = L[i++];
\par \cb1\cf0\ul0\i0\b0  72          \}
\par \cb1\cf0\ul0\i0\b0  73          else
\par \cb1\cf0\ul0\i0\b0  74          \{
\par \cb1\cf0\ul0\i0\b0  75              array[k] = R[j++];
\par \cb1\cf0\ul0\i0\b0  76          \}
\par \cb1\cf0\ul0\i0\b0  77      \}
\par \cb1\cf0\ul0\i0\b0  78  \}
\par \cb1\cf0\ul0\i0\b0  79  
\par \cb1\cf0\ul0\i0\b0  80  void merge_sort(int array[] , int left , int right)
\par \cb1\cf0\ul0\i0\b0  81  \{
\par \cb1\cf0\ul0\i0\b0  82      if(left<right)
\par \cb1\cf0\ul0\i0\b0  83      \{
\par \cb1\cf0\ul0\i0\b0  84          int mid = floor((left+right)/2);
\par \cb1\cf0\ul0\i0\b0  85          merge_sort(array , left , mid);
\par \cb1\cf0\ul0\i0\b0  86          merge_sort(array, mid+1 , right);
\par \cb1\cf0\ul0\i0\b0  87          arrayMerge(array, left , mid , right);
\par \cb1\cf0\ul0\i0\b0  88      \}
\par \cb1\cf0\ul0\i0\b0  89  \}
\par \cb1\cf0\ul0\i0\b0  90  
\par \cb1\cf0\ul0\i0\b0  91  int main()
\par \cb1\cf0\ul0\i0\b0  92  \{
\par \cb1\cf0\ul0\i0\b0  93      int n;
\par \cb1\cf0\ul0\i0\b0  94      printf("Enter Size Of Array: ");
\par \cb1\cf0\ul0\i0\b0  95      scanf("%d",&n);
\par \cb1\cf0\ul0\i0\b0  96  int array[60];
\par \cb1\cf0\ul0\i0\b0  97      for(int i = 0 ; i < n ; i++)
\par \cb1\cf0\ul0\i0\b0  98          scanf("%d",&array[i]);
\par \cb1\cf0\ul0\i0\b0  99  
\par \cb1\cf0\ul0\i0\b0 100  
\par \cb1\cf0\ul0\i0\b0 101      //quick_sort(array,0 , n-1);
\par \cb1\cf0\ul0\i0\b0 102       merge_sort(array , 0 , n-1);
\par \cb1\cf0\ul0\i0\b0 103  
\par \cb1\cf0\ul0\i0\b0 104  printf("After Sorting: ");
\par \cb1\cf0\ul0\i0\b0 105      for(int i = 0 ; i < n ; i++)
\par \cb1\cf0\ul0\i0\b0 106          printf("%d ",array[i]);
\par \cb1\cf0\ul0\i0\b0 107  
\par \cb1\cf0\ul0\i0\b0 108  
\par \cb1\cf0\ul0\i0\b0 109  \}
\par }