{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20   1  \cb3\cf13 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf11\b int \b0\cb1\cf0 vertex\cb3\cf22 ,\cb1\cf0 edges\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   3  \cb3\cf11\b int \b0\cb1\cf0 connectedSet\cb3\cf22 [\cb3\cf9 50\cb3\cf22 ],\cb3\cf13\b set\b0\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf11\b int \b0\cb1\cf0 left\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0   5  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0   6      \cb3\cf11\b return \b0\cb3\cf9 2\cb3\cf22 *\cb1\cf0 i\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   7  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0   8  \cb3\cf11\b int \b0\cb1\cf0 right\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0   9  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  10      \cb3\cf11\b return \b0\cb3\cf9 2\cb3\cf22 *\cb1\cf0 i\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  11  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  12  \cb3\cf11\b int \b0\cb1\cf0 parent\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  13  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  14      \cb3\cf11\b return \b0\cb1\cf0 i\cb3\cf22 /\cb3\cf9 2\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  15  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  16  
\par \cb1\cf0\ul0\i0\b0  17  \cb3\cf11\b void \b0\cb1\cf0 max_heapify\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 heap\cb3\cf22 [],\cb3\cf11\b int \b0\cb1\cf0 heap_size\cb3\cf22 ,\cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  18  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  19      \cb3\cf11\b int \b0\cb1\cf0 l\cb3\cf22 ,\cb1\cf0 r\cb3\cf22 ,\cb1\cf0 largest\cb3\cf22 ,\cb1\cf0 t\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  20      \cb1\cf0 l\cb3\cf22 =\cb1\cf0 left\cb3\cf22 (\cb1\cf0 i\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  21      \cb1\cf0 r\cb3\cf22 =\cb1\cf0 right\cb3\cf22 (\cb1\cf0 i\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  22  
\par \cb1\cf0\ul0\i0\b0  23      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 l\cb3\cf22 <=\cb1\cf0 heap_size \cb3\cf22 && \cb1\cf0 heap\cb3\cf22 [\cb1\cf0 l\cb3\cf22 ]>\cb1\cf0 heap\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ])
\par \cb1\cf0\ul0\i0\b0  24          \cb1\cf0 largest\cb3\cf22 =\cb1\cf0 l\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  25      \cb3\cf11\b else
\par \cb1\cf0\ul0\i0\b0  26          \cb1\cf0 largest\cb3\cf22 =\cb1\cf0 i\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  27      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 r\cb3\cf22 <=\cb1\cf0 heap_size \cb3\cf22 && \cb1\cf0 heap\cb3\cf22 [\cb1\cf0 r\cb3\cf22 ]>\cb1\cf0 heap\cb3\cf22 [\cb1\cf0 largest\cb3\cf22 ])
\par \cb1\cf0\ul0\i0\b0  28          \cb1\cf0 largest\cb3\cf22 =\cb1\cf0 r\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  29  
\par \cb1\cf0\ul0\i0\b0  30      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 largest \cb3\cf22 != \cb1\cf0 i\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  31      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  32          \cb1\cf0 t\cb3\cf22 =\cb1\cf0 heap\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0  33          \cb1\cf0 heap\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]=\cb1\cf0 heap\cb3\cf22 [\cb1\cf0 largest\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0  34          \cb1\cf0 heap\cb3\cf22 [\cb1\cf0 largest\cb3\cf22 ]=\cb1\cf0 t\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  35          \cb1\cf0 max_heapify\cb3\cf22 (\cb1\cf0 heap\cb3\cf22 ,\cb1\cf0 heap_size\cb3\cf22 ,\cb1\cf0 largest\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  36      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  37  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  38  \cb3\cf11\b void \b0\cb1\cf0 build_maxheap\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 heap\cb3\cf22 [],\cb3\cf11\b int \b0\cb1\cf0 heap_size\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  39  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  40      \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  41      \cb3\cf11\b for\b0\cb3\cf22 ( \cb1\cf0 i\cb3\cf22 =\cb1\cf0 heap_size\cb3\cf22 /\cb3\cf9 2 \cb3\cf22 ; \cb1\cf0 i\cb3\cf22 >=\cb3\cf9 1 \cb3\cf22 ; \cb1\cf0 i\cb3\cf22 --)
\par \cb1\cf0\ul0\i0\b0  42      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  43          \cb1\cf0 max_heapify\cb3\cf22 (\cb1\cf0 heap\cb3\cf22 ,\cb1\cf0 heap_size\cb3\cf22 ,\cb1\cf0 i\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  44      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  45  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  46  \cb3\cf11\b void \b0\cb1\cf0 heap_sort\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 heap\cb3\cf22 [],\cb3\cf11\b int \b0\cb1\cf0 heap_size\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  47  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  48      \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 ,\cb1\cf0 t\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  49      \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb1\cf0 heap_size\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 >\cb3\cf9 1\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 --)
\par \cb1\cf0\ul0\i0\b0  50      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  51         \cb1\cf0 t\cb3\cf22 =\cb1\cf0 heap\cb3\cf22 [\cb3\cf9 1\cb3\cf22 ] ;
\par \cb1\cf0\ul0\i0\b0  52         \cb1\cf0 heap\cb3\cf22 [\cb3\cf9 1\cb3\cf22 ]=\cb1\cf0 heap\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0  53         \cb1\cf0 heap\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]=\cb1\cf0 t\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  54  
\par \cb1\cf0\ul0\i0\b0  55         \cb1\cf0 heap_size \cb3\cf22 -= \cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  56         \cb1\cf0 max_heapify\cb3\cf22 (\cb1\cf0 heap\cb3\cf22 ,\cb1\cf0 heap_size\cb3\cf22 ,\cb3\cf9 1\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  57      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  58  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  59  
\par \cb1\cf0\ul0\i0\b0  60  \cb3\cf11\b int \b0\cb1\cf0 isSafe\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 node1\cb3\cf22 ,\cb3\cf11\b int \b0\cb1\cf0 node2\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  61  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  62      \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 ,\cb1\cf0 flag1\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ,\cb1\cf0 flag2\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  63      \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0  64      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  65          \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 connectedSet\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb1\cf0 node1\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  66              \cb1\cf0 flag1\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  67          \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 connectedSet\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb1\cf0 node2\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  68              \cb1\cf0 flag2\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  69      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  70      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 flag1\cb3\cf22 &&\cb1\cf0 flag2\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  71          \cb3\cf11\b return \b0\cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  72      \cb3\cf11\b else
\par \cb1\cf0\ul0\i0\b0  73      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  74          \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 flag1\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  75          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  76            \cb1\cf0 connectedSet\cb3\cf22 [\cb3\cf13\b set\b0\cb3\cf22 ]=\cb1\cf0 node1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  77            \cb3\cf13\b set\b0\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0  78          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  79          \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 flag2\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  80          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  81            \cb1\cf0 connectedSet\cb3\cf22 [\cb3\cf13\b set\b0\cb3\cf22 ]=\cb1\cf0 node2\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  82            \cb3\cf13\b set\b0\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0  83          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  84          \cb3\cf11\b return \b0\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  85  
\par \cb1\cf0\ul0\i0\b0  86      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  87  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  88  
\par \cb1\cf0\ul0\i0\b0  89  \cb3\cf11\b void \b0\cb1\cf0 krushkal\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 graph\cb3\cf22 [][\cb1\cf0 vertex\cb3\cf22 ],\cb3\cf11\b int \b0\cb3\cf13\b array\b0\cb3\cf22 [])
\par \cb1\cf0\ul0\i0\b0  90  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  91       \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 ,\cb1\cf0 j\cb3\cf22 ,\cb1\cf0 k\cb3\cf22 ,\cb1\cf0 flag\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  92       \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 <\cb1\cf0 edges\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0  93       \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  94           \cb1\cf0 j\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ,\cb1\cf0 k\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ,\cb1\cf0 flag\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  95           \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 j\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 j\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 j\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0  96           \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  97              \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 k\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 k\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 k\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0  98           \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  99                  \cb3\cf11\b if\b0\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb1\cf0 graph\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ][\cb1\cf0 k\cb3\cf22 ])
\par \cb1\cf0\ul0\i0\b0 100                  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 101                  \cb1\cf0 flag\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 102                  \cb3\cf11\b break\b0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 103                  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 104           \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 105             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 flag\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 106                      \cb3\cf11\b break\b0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 107           \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 108           \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 isSafe\cb3\cf22 (\cb1\cf0 j\cb3\cf22 ,\cb1\cf0 k\cb3\cf22 ))
\par \cb1\cf0\ul0\i0\b0 109           \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 110              \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\n->Nodes :%d %d Weight: %d"\cb3\cf22 ,\cb1\cf0 j\cb3\cf22 ,\cb1\cf0 k\cb3\cf22 ,\cb1\cf0 graph\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ][\cb1\cf0 k\cb3\cf22 ]);
\par \cb1\cf0\ul0\i0\b0 111              \cb1\cf0 graph\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ][\cb1\cf0 k\cb3\cf22 ]=-\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 112           \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 113          
\par \cb1\cf0\ul0\i0\b0 114       \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 115  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 116  
\par \cb1\cf0\ul0\i0\b0 117  \cb3\cf11\b int \b0\cb1\cf0 main\cb3\cf22 (\cb3\cf11\b void\b0\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 118  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 119      \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 ,\cb1\cf0 j\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 120  
\par \cb1\cf0\ul0\i0\b0 121    \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Enter The Number of Vertices and Egdes: "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 122  \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d %d"\cb3\cf22 ,&\cb1\cf0 vertex\cb3\cf22 ,&\cb1\cf0 edges\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 123  \cb3\cf11\b int \b0\cb1\cf0 graph\cb3\cf22 [\cb1\cf0 vertex\cb3\cf22 ][\cb1\cf0 vertex\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 124  \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0 125      \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 j\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 j\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 j\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0 126          \cb1\cf0 graph\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ][\cb1\cf0 j\cb3\cf22 ]=\cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 127  
\par \cb1\cf0\ul0\i0\b0 128  \cb3\cf11\b int \b0\cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 edges\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ],\cb1\cf0 k\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 129   \cb1\cf0 memset\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 , \cb3\cf9 0\cb3\cf22 , \cb3\cf11\b sizeof \b0\cb3\cf13\b array\b0\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 130    \cb1\cf0 memset\cb3\cf22 (\cb1\cf0 connectedSet\cb3\cf22 , -\cb3\cf9 1\cb3\cf22 , \cb3\cf11\b sizeof \b0\cb1\cf0 connectedSet\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 131  
\par \cb1\cf0\ul0\i0\b0 132  
\par \cb1\cf0\ul0\i0\b0 133      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nEnter Graph Connections & Weight: "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 134      \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 <\cb1\cf0 edges\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0 135      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 136          \cb3\cf11\b int \b0\cb1\cf0 node1\cb3\cf22 ,\cb1\cf0 node2\cb3\cf22 ,\cb1\cf0 weight\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 137          \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d %d %d"\cb3\cf22 ,&\cb1\cf0 node1\cb3\cf22 ,&\cb1\cf0 node2\cb3\cf22 ,&\cb1\cf0 weight\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 138          \cb1\cf0 graph\cb3\cf22 [\cb1\cf0 node1\cb3\cf22 ][\cb1\cf0 node2\cb3\cf22 ]=\cb1\cf0 weight\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 139  
\par \cb1\cf0\ul0\i0\b0 140          \cb3\cf13\b array\b0\cb3\cf22 [\cb1\cf0 k\cb3\cf22 ]=\cb1\cf0 weight\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 141              \cb1\cf0 k\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0 142  
\par \cb1\cf0\ul0\i0\b0 143      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 144      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nAdjacency Lists are:\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 145      \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0 146        \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 147        \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 j\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 j\cb3\cf22 <\cb1\cf0 vertex\cb3\cf22 ;\cb1\cf0 j\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0 148        \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 149         \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "%d "\cb3\cf22 ,\cb1\cf0 graph\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ][\cb1\cf0 j\cb3\cf22 ]);
\par \cb1\cf0\ul0\i0\b0 150        \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 151        \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 152        \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 153         \cb1\cf0 build_maxheap\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 ,\cb1\cf0 edges\cb3\cf22 +\cb3\cf9 1\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 154      \cb1\cf0 heap_sort\cb3\cf22 (\cb3\cf13\b array\b0\cb3\cf22 ,\cb1\cf0 edges\cb3\cf22 +\cb3\cf9 1\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 155         \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nMinimum Spanning Tree Connections are:\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 156        \cb1\cf0 krushkal\cb3\cf22 (\cb1\cf0 graph\cb3\cf22 ,\cb3\cf13\b array\b0\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 157  \cb3\cf22 \}
\par }