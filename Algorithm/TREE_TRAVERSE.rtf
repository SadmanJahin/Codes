{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16   1  \cb3\cf13 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf11\b typedef struct \b0\cb1\cf0 node Node\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   3  \cb3\cf11\b struct \b0\cb1\cf0 node
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0   5      \cb3\cf11\b int \b0\cb1\cf0 data\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   6      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 right\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   7      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 left\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   8  \cb3\cf22 \};
\par \cb1\cf0\ul0\i0\b0   9  \cb1\cf0 Node\cb3\cf22 * \cb1\cf0 Create_node\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 item\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  10  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  11     \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 new_node \cb3\cf22 = (\cb1\cf0 Node \cb3\cf22 *) \cb1\cf0 malloc\cb3\cf22 (\cb3\cf11\b sizeof\b0\cb3\cf22 (\cb1\cf0 Node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0  12     \cb1\cf0 new_node\cb3\cf22 ->\cb1\cf0 data\cb3\cf22 =\cb1\cf0 item\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  13     \cb1\cf0 new_node\cb3\cf22 ->\cb1\cf0 right\cb3\cf22 =\cb1\cf0 NULL\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  14      \cb1\cf0 new_node\cb3\cf22 ->\cb1\cf0 left\cb3\cf22 =\cb1\cf0 NULL\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  15  
\par \cb1\cf0\ul0\i0\b0  16      \cb3\cf11\b return \b0\cb1\cf0 new_node\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  17  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  18  \cb3\cf11\b void \b0\cb1\cf0 add_LeftChild\cb3\cf22 (\cb1\cf0 Node \cb3\cf22 *\cb1\cf0 node\cb3\cf22 ,\cb1\cf0 Node\cb3\cf22 * \cb1\cf0 child\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  19  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  20  \cb1\cf0 node\cb3\cf22 ->\cb1\cf0 left\cb3\cf22 =\cb1\cf0 child\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  21  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  22  \cb3\cf11\b void \b0\cb1\cf0 add_RightChild\cb3\cf22 (\cb1\cf0 Node \cb3\cf22 *\cb1\cf0 node\cb3\cf22 ,\cb1\cf0 Node\cb3\cf22 * \cb1\cf0 child\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  23  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  24  \cb1\cf0 node\cb3\cf22 ->\cb1\cf0 right\cb3\cf22 =\cb1\cf0 child\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  25  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  26  
\par \cb1\cf0\ul0\i0\b0  27  \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 Create_Tree\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0  28  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  29      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 two\cb3\cf22 =\cb1\cf0 Create_node\cb3\cf22 (\cb3\cf9 2\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  30      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 seven\cb3\cf22 =\cb1\cf0 Create_node\cb3\cf22 (\cb3\cf9 7\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  31      Node *nine=Create_node(9);
\par \cb1\cf0\ul0\i0\b0  32     add_LeftChild(two,seven);
\par \cb1\cf0\ul0\i0\b0  33     add_RightChild(two,nine);
\par \cb1\cf0\ul0\i0\b0  34      Node *one=Create_node(1);
\par \cb1\cf0\ul0\i0\b0  35      Node *six=Create_node(6);
\par \cb1\cf0\ul0\i0\b0  36      add_LeftChild(seven,one);
\par \cb1\cf0\ul0\i0\b0  37       add_RightChild(nine,six);
\par \cb1\cf0\ul0\i0\b0  38  
\par \cb1\cf0\ul0\i0\b0  39       return two;
\par \cb1\cf0\ul0\i0\b0  40  \}
\par \cb1\cf0\ul0\i0\b0  41  void pre_order(Node *node)
\par \cb1\cf0\ul0\i0\b0  42  \{
\par \cb1\cf0\ul0\i0\b0  43      printf("%d ",node->data);
\par \cb1\cf0\ul0\i0\b0  44      if(node->left!=NULL)
\par \cb1\cf0\ul0\i0\b0  45          pre_order(node->left);
\par \cb1\cf0\ul0\i0\b0  46  
\par \cb1\cf0\ul0\i0\b0  47      if(node->right!=NULL)
\par \cb1\cf0\ul0\i0\b0  48          pre_order(node->right);
\par \cb1\cf0\ul0\i0\b0  49  
\par \cb1\cf0\ul0\i0\b0  50  \}
\par \cb1\cf0\ul0\i0\b0  51  
\par \cb1\cf0\ul0\i0\b0  52  void post_order(Node *node)
\par \cb1\cf0\ul0\i0\b0  53  \{
\par \cb1\cf0\ul0\i0\b0  54  
\par \cb1\cf0\ul0\i0\b0  55      if(node->left!=NULL)
\par \cb1\cf0\ul0\i0\b0  56          post_order(node->left);
\par \cb1\cf0\ul0\i0\b0  57  
\par \cb1\cf0\ul0\i0\b0  58      if(node->right!=NULL)
\par \cb1\cf0\ul0\i0\b0  59          post_order(node->right);
\par \cb1\cf0\ul0\i0\b0  60  
\par \cb1\cf0\ul0\i0\b0  61          printf("%d ",node->data);
\par \cb1\cf0\ul0\i0\b0  62  \}
\par \cb1\cf0\ul0\i0\b0  63  
\par \cb1\cf0\ul0\i0\b0  64  void in_order(Node *node)
\par \cb1\cf0\ul0\i0\b0  65  \{
\par \cb1\cf0\ul0\i0\b0  66  
\par \cb1\cf0\ul0\i0\b0  67      if(node->left!=NULL)
\par \cb1\cf0\ul0\i0\b0  68          in_order(node->left);
\par \cb1\cf0\ul0\i0\b0  69  
\par \cb1\cf0\ul0\i0\b0  70        printf("%d ",node->data);
\par \cb1\cf0\ul0\i0\b0  71  
\par \cb1\cf0\ul0\i0\b0  72      if(node->right!=NULL)
\par \cb1\cf0\ul0\i0\b0  73          in_order(node->right);
\par \cb1\cf0\ul0\i0\b0  74  
\par \cb1\cf0\ul0\i0\b0  75  
\par \cb1\cf0\ul0\i0\b0  76  \}
\par \cb1\cf0\ul0\i0\b0  77  
\par \cb1\cf0\ul0\i0\b0  78  
\par \cb1\cf0\ul0\i0\b0  79  void print_info(Node *n)
\par \cb1\cf0\ul0\i0\b0  80  \{
\par \cb1\cf0\ul0\i0\b0  81      while(n!=NULL)
\par \cb1\cf0\ul0\i0\b0  82   \{
\par \cb1\cf0\ul0\i0\b0  83  printf("%d",n->data);
\par \cb1\cf0\ul0\i0\b0  84    n=n->right ;
\par \cb1\cf0\ul0\i0\b0  85  
\par \cb1\cf0\ul0\i0\b0  86   \}
\par \cb1\cf0\ul0\i0\b0  87  \}
\par \cb1\cf0\ul0\i0\b0  88  
\par \cb1\cf0\ul0\i0\b0  89  int main ()
\par \cb1\cf0\ul0\i0\b0  90  \{
\par \cb1\cf0\ul0\i0\b0  91      Node *n=Create_Tree();
\par \cb1\cf0\ul0\i0\b0  92      pre_order(n);
\par \cb1\cf0\ul0\i0\b0  93      printf("\\n");
\par \cb1\cf0\ul0\i0\b0  94      post_order(n);
\par \cb1\cf0\ul0\i0\b0  95       printf("\\n");
\par \cb1\cf0\ul0\i0\b0  96       in_order(n);
\par \cb1\cf0\ul0\i0\b0  97  
\par \cb1\cf0\ul0\i0\b0  98      return 0;
\par \cb1\cf0\ul0\i0\b0  99  \}
\par }