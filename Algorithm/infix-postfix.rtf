{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf13 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0  2  \cb3\cf13 #include <string.h>
\par \cb1\cf0\ul0\i0\b0  3  \cb3\cf11\b char \b0\cb3\cf13\b stack\b0\cb3\cf22 [\cb3\cf9 40\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0  4  \cb3\cf11\b int \b0\cb1\cf0 top\cb3\cf22 =-\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  5  \cb3\cf11\b void \b0\cb1\cf0 push\cb3\cf22 (\cb3\cf11\b char \b0\cb1\cf0 item\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  6  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  7      \cb1\cf0 top\cb3\cf22 +=\cb3\cf9 1\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  8      \cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]=\cb1\cf0 item\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  9  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 10  \cb3\cf11\b char \b0\cb1\cf0 pop\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0 11  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 12      \cb3\cf11\b char \b0\cb1\cf0 temp\cb3\cf22 =\cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 13      \cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]=\cb3\cf19 '#'\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 14      \cb1\cf0 top\cb3\cf22 --;
\par \cb1\cf0\ul0\i0\b0 15      \cb3\cf11\b return \b0\cb1\cf0 temp\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 16      \cb3\cf5 //return stack[top--];
\par \cb1\cf0\ul0\i0\b0 17  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 18  \cb3\cf11\b void \b0\cb1\cf0 InfixToPostfix\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0 19  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 20      \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 ,\cb1\cf0 j\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ,\cb1\cf0 len\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 21      \cb3\cf11\b char \b0\cb1\cf0 str\cb3\cf22 [\cb3\cf9 40\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 22      \cb3\cf11\b char \b0\cb1\cf0 postfix\cb3\cf22 [\cb3\cf9 40\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 23  \cb1\cf0 gets\cb3\cf22 (\cb1\cf0 str\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 24  \cb1\cf0 len\cb3\cf22 =\cb1\cf0 strlen\cb3\cf22 (\cb1\cf0 str\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 25  \cb1\cf0 str\cb3\cf22 [\cb1\cf0 len\cb3\cf22 ]=\cb3\cf19 '$'\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 26  \cb1\cf0 str\cb3\cf22 [\cb1\cf0 len\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ]=\cb3\cf19 '\\0'\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 27  \cb1\cf0 puts\cb3\cf22 (\cb1\cf0 str\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 28  
\par \cb1\cf0\ul0\i0\b0 29  \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;\cb1\cf0 i\cb3\cf22 <\cb1\cf0 strlen\cb3\cf22 (\cb1\cf0 str\cb3\cf22 );\cb1\cf0 i\cb3\cf22 ++)
\par \cb1\cf0\ul0\i0\b0 30  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 31      \cb3\cf11\b if\b0\cb3\cf22 ( \cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 '('\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 32          \cb1\cf0 push\cb3\cf22 (\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]);
\par \cb1\cf0\ul0\i0\b0 33      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 '+' \cb3\cf22 || \cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 '-' \cb3\cf22 || \cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 '*' \cb3\cf22 || \cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 '/'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 34      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 35        \cb3\cf11\b if\b0\cb3\cf22 (\cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]==\cb3\cf19 '*' \cb3\cf22 || \cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]== \cb3\cf19 '/'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 36            \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 37            \cb1\cf0 postfix\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ]=\cb1\cf0 pop\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0 38            \cb1\cf0 push\cb3\cf22 (\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]);
\par \cb1\cf0\ul0\i0\b0 39            \cb1\cf0 j\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0 40            \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 41        \cb3\cf11\b else
\par \cb1\cf0\ul0\i0\b0 42          \cb1\cf0 push\cb3\cf22 (\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]);
\par \cb1\cf0\ul0\i0\b0 43      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 44      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]>=\cb3\cf19 'A' \cb3\cf22 && \cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]<=\cb3\cf19 'Z'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 45      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 46          \cb1\cf0 postfix\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ]=\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 47          \cb1\cf0 j\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0 48      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 49      \cb3\cf11\b if\b0\cb3\cf22 ( \cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 ')'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 50      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 51  
\par \cb1\cf0\ul0\i0\b0 52        \cb3\cf11\b while\b0\cb3\cf22 (\cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]!=\cb3\cf19 '('\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 53          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 54            \cb1\cf0 postfix\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ]=\cb1\cf0 pop\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0 55             \cb1\cf0 j\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0 56          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 57     \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 58     \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 str\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]==\cb3\cf19 '$'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 59     \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 60         \cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 top\cb3\cf22 >=\cb3\cf9 0\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 61          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 62          \cb3\cf11\b if\b0\cb3\cf22 (\cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]==\cb3\cf19 '+' \cb3\cf22 || \cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]==\cb3\cf19 '-' \cb3\cf22 || \cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]==\cb3\cf19 '*' \cb3\cf22 || \cb3\cf13\b stack\b0\cb3\cf22 [\cb1\cf0 top\cb3\cf22 ]==\cb3\cf19 '/'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 63          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 64          \cb1\cf0 postfix\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ]=\cb1\cf0 pop\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0 65          \cb1\cf0 j\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0 66          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 67          \cb3\cf11\b else
\par \cb1\cf0\ul0\i0\b0 68          \cb1\cf0 pop\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0 69          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 70     \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 71  
\par \cb1\cf0\ul0\i0\b0 72  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 73  
\par \cb1\cf0\ul0\i0\b0 74  \cb1\cf0 postfix\cb3\cf22 [\cb1\cf0 j\cb3\cf22 ]=\cb3\cf19 '\\0'\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 75  \cb1\cf0 puts\cb3\cf22 (\cb1\cf0 postfix\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 76  
\par \cb1\cf0\ul0\i0\b0 77  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 78  
\par \cb1\cf0\ul0\i0\b0 79  
\par \cb1\cf0\ul0\i0\b0 80  
\par \cb1\cf0\ul0\i0\b0 81  \cb3\cf11\b int \b0\cb1\cf0 main\cb3\cf22 (\cb3\cf11\b void\b0\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 82  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 83  \cb1\cf0 InfixToPostfix\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0 84  \cb3\cf22 \}
\par }