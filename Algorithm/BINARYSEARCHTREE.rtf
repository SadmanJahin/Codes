{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16   1  \cb3\cf13 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf11\b typedef struct \b0\cb1\cf0 node Node\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   3  \cb3\cf11\b struct \b0\cb1\cf0 node
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0   5      \cb3\cf11\b int \b0\cb1\cf0 data\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   6      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 right\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   7      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 left\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0   8  \cb3\cf22 \};
\par \cb1\cf0\ul0\i0\b0   9  \cb1\cf0 Node\cb3\cf22 * \cb1\cf0 Create_node\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 item\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  10  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  11     \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 new_node \cb3\cf22 = (\cb1\cf0 Node \cb3\cf22 *) \cb1\cf0 malloc\cb3\cf22 (\cb3\cf11\b sizeof\b0\cb3\cf22 (\cb1\cf0 Node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0  12     \cb1\cf0 new_node\cb3\cf22 ->\cb1\cf0 data\cb3\cf22 =\cb1\cf0 item\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  13     \cb1\cf0 new_node\cb3\cf22 ->\cb1\cf0 right\cb3\cf22 =\cb1\cf0 NULL\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  14      \cb1\cf0 new_node\cb3\cf22 ->\cb1\cf0 left\cb3\cf22 =\cb1\cf0 NULL\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  15  
\par \cb1\cf0\ul0\i0\b0  16      \cb3\cf11\b return \b0\cb1\cf0 new_node\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  17  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  18  \cb3\cf11\b void \b0\cb1\cf0 add_LeftChild\cb3\cf22 (\cb1\cf0 Node \cb3\cf22 *\cb1\cf0 node\cb3\cf22 ,\cb1\cf0 Node\cb3\cf22 * \cb1\cf0 child\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  19  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  20  \cb1\cf0 node\cb3\cf22 ->\cb1\cf0 left\cb3\cf22 =\cb1\cf0 child\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  21  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  22  \cb3\cf11\b void \b0\cb1\cf0 add_RightChild\cb3\cf22 (\cb1\cf0 Node \cb3\cf22 *\cb1\cf0 node\cb3\cf22 ,\cb1\cf0 Node\cb3\cf22 * \cb1\cf0 child\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  23  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  24  \cb1\cf0 node\cb3\cf22 ->\cb1\cf0 right\cb3\cf22 =\cb1\cf0 child\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  25  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  26  
\par \cb1\cf0\ul0\i0\b0  27  \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 Create_Tree\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0  28  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  29      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 two\cb3\cf22 =\cb1\cf0 Create_node\cb3\cf22 (\cb3\cf9 2\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  30      \cb1\cf0 Node \cb3\cf22 *\cb1\cf0 three\cb3\cf22 =\cb1\cf0 Create_node\cb3\cf22 (\cb3\cf9 3\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  31      Node *seven=Create_node(7);
\par \cb1\cf0\ul0\i0\b0  32      Node *nine=Create_node(9);
\par \cb1\cf0\ul0\i0\b0  33       Node *one=Create_node(1);
\par \cb1\cf0\ul0\i0\b0  34      Node *eight=Create_node(8);
\par \cb1\cf0\ul0\i0\b0  35     add_LeftChild(seven,two);
\par \cb1\cf0\ul0\i0\b0  36     add_LeftChild(two,one);
\par \cb1\cf0\ul0\i0\b0  37  add_RightChild(two,three);
\par \cb1\cf0\ul0\i0\b0  38      add_RightChild(seven,eight);
\par \cb1\cf0\ul0\i0\b0  39       add_RightChild(eight,nine);
\par \cb1\cf0\ul0\i0\b0  40  
\par \cb1\cf0\ul0\i0\b0  41       return seven;
\par \cb1\cf0\ul0\i0\b0  42  \}
\par \cb1\cf0\ul0\i0\b0  43  Node *SearchNode(Node *root,int item)
\par \cb1\cf0\ul0\i0\b0  44  \{
\par \cb1\cf0\ul0\i0\b0  45      while(root!=NULL)
\par \cb1\cf0\ul0\i0\b0  46      \{
\par \cb1\cf0\ul0\i0\b0  47      if(root->data==item)
\par \cb1\cf0\ul0\i0\b0  48          return root;
\par \cb1\cf0\ul0\i0\b0  49      if(item > root->data)
\par \cb1\cf0\ul0\i0\b0  50      \{
\par \cb1\cf0\ul0\i0\b0  51          Node *currentNode=root;
\par \cb1\cf0\ul0\i0\b0  52          while(currentNode!=NULL)
\par \cb1\cf0\ul0\i0\b0  53          \{
\par \cb1\cf0\ul0\i0\b0  54              if(currentNode->data==item)
\par \cb1\cf0\ul0\i0\b0  55                  return currentNode;
\par \cb1\cf0\ul0\i0\b0  56              if(item < currentNode->data)
\par \cb1\cf0\ul0\i0\b0  57              \{
\par \cb1\cf0\ul0\i0\b0  58                  root=currentNode;
\par \cb1\cf0\ul0\i0\b0  59                  break;
\par \cb1\cf0\ul0\i0\b0  60  
\par \cb1\cf0\ul0\i0\b0  61              \}
\par \cb1\cf0\ul0\i0\b0  62              currentNode = currentNode->right;
\par \cb1\cf0\ul0\i0\b0  63            root=currentNode;
\par \cb1\cf0\ul0\i0\b0  64             if(root==NULL)
\par \cb1\cf0\ul0\i0\b0  65               return NULL;
\par \cb1\cf0\ul0\i0\b0  66  
\par \cb1\cf0\ul0\i0\b0  67        \}
\par \cb1\cf0\ul0\i0\b0  68      \}
\par \cb1\cf0\ul0\i0\b0  69       if(item < root->data)
\par \cb1\cf0\ul0\i0\b0  70      \{
\par \cb1\cf0\ul0\i0\b0  71           Node *currentNode=root;
\par \cb1\cf0\ul0\i0\b0  72         while(currentNode!=NULL)
\par \cb1\cf0\ul0\i0\b0  73          \{
\par \cb1\cf0\ul0\i0\b0  74              if(currentNode->data==item)
\par \cb1\cf0\ul0\i0\b0  75                  return currentNode;
\par \cb1\cf0\ul0\i0\b0  76              if(item > currentNode->data)
\par \cb1\cf0\ul0\i0\b0  77              \{
\par \cb1\cf0\ul0\i0\b0  78  
\par \cb1\cf0\ul0\i0\b0  79              root=currentNode;
\par \cb1\cf0\ul0\i0\b0  80              break;
\par \cb1\cf0\ul0\i0\b0  81              \}
\par \cb1\cf0\ul0\i0\b0  82              currentNode = currentNode->left;
\par \cb1\cf0\ul0\i0\b0  83              root=currentNode;
\par \cb1\cf0\ul0\i0\b0  84             if(root==NULL)
\par \cb1\cf0\ul0\i0\b0  85               return NULL;
\par \cb1\cf0\ul0\i0\b0  86  
\par \cb1\cf0\ul0\i0\b0  87          \}
\par \cb1\cf0\ul0\i0\b0  88      \}
\par \cb1\cf0\ul0\i0\b0  89  
\par \cb1\cf0\ul0\i0\b0  90      \}
\par \cb1\cf0\ul0\i0\b0  91  
\par \cb1\cf0\ul0\i0\b0  92  \}
\par \cb1\cf0\ul0\i0\b0  93  
\par \cb1\cf0\ul0\i0\b0  94  Node *insertBST(Node *root,Node *node)
\par \cb1\cf0\ul0\i0\b0  95  \{
\par \cb1\cf0\ul0\i0\b0  96      Node *parentNode,*currentNode;
\par \cb1\cf0\ul0\i0\b0  97      if(root==NULL)
\par \cb1\cf0\ul0\i0\b0  98      \{
\par \cb1\cf0\ul0\i0\b0  99          root=node;
\par \cb1\cf0\ul0\i0\b0 100          return root;
\par \cb1\cf0\ul0\i0\b0 101      \}
\par \cb1\cf0\ul0\i0\b0 102      parentNode=NULL;
\par \cb1\cf0\ul0\i0\b0 103      currentNode=root;
\par \cb1\cf0\ul0\i0\b0 104      while(currentNode!=NULL)
\par \cb1\cf0\ul0\i0\b0 105      \{
\par \cb1\cf0\ul0\i0\b0 106          parentNode=currentNode;
\par \cb1\cf0\ul0\i0\b0 107          if(node->data < currentNode->data)
\par \cb1\cf0\ul0\i0\b0 108          currentNode=currentNode->left;
\par \cb1\cf0\ul0\i0\b0 109          else
\par \cb1\cf0\ul0\i0\b0 110              currentNode=currentNode->right;
\par \cb1\cf0\ul0\i0\b0 111      \}
\par \cb1\cf0\ul0\i0\b0 112      if( node->data < parentNode->data)
\par \cb1\cf0\ul0\i0\b0 113      add_LeftChild(parentNode,node);
\par \cb1\cf0\ul0\i0\b0 114          else
\par \cb1\cf0\ul0\i0\b0 115      add_RightChild(parentNode,node);
\par \cb1\cf0\ul0\i0\b0 116  
\par \cb1\cf0\ul0\i0\b0 117      return root;
\par \cb1\cf0\ul0\i0\b0 118  
\par \cb1\cf0\ul0\i0\b0 119  \}
\par \cb1\cf0\ul0\i0\b0 120  void print_info(Node *n)
\par \cb1\cf0\ul0\i0\b0 121  \{
\par \cb1\cf0\ul0\i0\b0 122      while(n!=NULL)
\par \cb1\cf0\ul0\i0\b0 123   \{
\par \cb1\cf0\ul0\i0\b0 124  printf("%d",n->data);
\par \cb1\cf0\ul0\i0\b0 125    n=n->left ;
\par \cb1\cf0\ul0\i0\b0 126  
\par \cb1\cf0\ul0\i0\b0 127   \}
\par \cb1\cf0\ul0\i0\b0 128  \}
\par \cb1\cf0\ul0\i0\b0 129  
\par \cb1\cf0\ul0\i0\b0 130  
\par \cb1\cf0\ul0\i0\b0 131  int main (void)
\par \cb1\cf0\ul0\i0\b0 132  
\par \cb1\cf0\ul0\i0\b0 133  \{
\par \cb1\cf0\ul0\i0\b0 134  
\par \cb1\cf0\ul0\i0\b0 135   Node *n=Create_Tree();
\par \cb1\cf0\ul0\i0\b0 136   Node *p=Create_node(6);
\par \cb1\cf0\ul0\i0\b0 137   Node *y=Create_node(4);
\par \cb1\cf0\ul0\i0\b0 138   insertBST(n,p);
\par \cb1\cf0\ul0\i0\b0 139   insertBST(n,y);
\par \cb1\cf0\ul0\i0\b0 140  Node *res=SearchNode(n,6);
\par \cb1\cf0\ul0\i0\b0 141  if(res==NULL)
\par \cb1\cf0\ul0\i0\b0 142      printf("Not Found");
\par \cb1\cf0\ul0\i0\b0 143  else printf("%d Found",res->data);
\par \cb1\cf0\ul0\i0\b0 144  
\par \cb1\cf0\ul0\i0\b0 145  
\par \cb1\cf0\ul0\i0\b0 146  \}
\par }